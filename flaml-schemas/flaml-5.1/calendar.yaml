objects: [timestamps]

structures:
  - name: time
    type: linear
    affects: timestamps
    covered-by: [days, weeks, events] # keyword needs work

    structures: # call it derivative? Inherited?
      - name: week-order
        type: order
        affects: weeks

representations: # presentations?
  - name: day-view
    type: gui
    objects:
      - hlines: [timestamps, timestamps.now]
      # - hlines: [days.selected->timestamps, timestamps.now]
      - rects: days.selected->events # events during the selected day
    structures:
      - vstack: time
  - name: week-view
    type: gui
    objects:
      # - rect: weeks.selected->days  # a bit hazey how this composes with day-view, since it's not a function
      - regions: day-view # how do I parametrize this? should take a set of days...
    structures:
      - hstack: time
  - name: week-nav-buttons
    type: gui
    objects:
      - icons: nav-week # not quite there yet, but the button represents an action

behavior:
  - name: add-event
    input:
      - name: click
        when: mouse/cursor in day-view # missing that position influences where the new event goes
    edits: events
  - name: move-event
    moves:
      object: events.selected
      in: events
      along: time # time->days-view/vstack
    input: mouse.drag.y # still missing the vega-express mapping goodness

  - name: nav-week
    moves:
      - object: weeks.selected
        in: weeks
        along: week-order
    input:
      - (keyboard.j, keyboard.k) # two keys generate a set of actions to navigate linear things
      - name: mouse/click
        when: mouse/cursor in week-nav-button

notes:
  - How do I parametrize the day-view function to reuse it? should take a set of days..
    - maybe day-view has a "parameter" field, then I can call it with `day-view(week.current->days)`
  - dragging events; altair-express mapping of input action structure to conceptual structure to graphical structure... all feels very close
