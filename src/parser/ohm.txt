# --------------------- Grammar 1.2.1 -------------------- #
IS {
  
  program 
    = (statement eol+)*statement eol*
    
  statement 
    =  relation -- relation
    | pattern -- pattern
    | def -- definition
    | expr -- expression
    
  pattern = "pattern " ident (" extends " ident)?":"eol
     ("\t"statement eol)+"end"
     
  relation = ((def | expr) " represents " expr) (" with " expr (" as " expr)?)? -- view
  | (def | expr) " covers " expr " along " expr -- cover
            | (def | expr) " " ("mapto many"  | "mapto" | "structures" | "constrains" | "groups") " " expr -- binary_relation

  def  (definition statement)
    = (expr": ") + ident
   
  expr
    = expr ("." | "<-") expr -- binary
    | ident -- var
   
  ident  (an identifier)
    = letter (alnum | "_")*

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole
  
  eol = "\r"? "\n"
}